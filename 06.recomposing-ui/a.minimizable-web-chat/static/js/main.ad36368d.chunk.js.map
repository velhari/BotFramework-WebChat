{"version":3,"sources":["WebChat.js","MinimizableWebChat.js","App.js","serviceWorker.js","index.js","WebPage.jpg"],"names":["WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","backgroundColor","useEffect","MinimizableWebChat","createStore","dispatch","next","action","type","payload","name","value","language","window","navigator","activity","from","role","setNewMessage","useState","loaded","setLoaded","minimized","setMinimized","newMessage","side","setSide","setToken","handleFetchToken","useCallback","a","async","fetch","method","res","json","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","onClick","classNames","App","alt","src","WebPageBackground","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ad36368d.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\n\nimport './WebChat.css';\n\nconst WebChat = ({ className, onFetchToken, store, token }) => {\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  useEffect(() => {\n    onFetchToken();\n  }, [onFetchToken]);\n\n  return token ? (\n    <ReactWebChat className={`${className || ''} web-chat`} directLine={directLine} store={store} styleSet={styleSet} />\n  ) : (\n    <div className={`${className || ''} connect-spinner`}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          <span className=\"ms-Icon ms-Icon--Robot\" />\n        </div>\n        <p>Please wait while we are connecting.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebChat;\n","import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\n\nimport WebChat from './WebChat';\n\nimport './fabric-icons-inline.css';\nimport './MinimizableWebChat.css';\n\nconst MinimizableWebChat = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n\n        return next(action);\n      }),\n    []\n  );\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [side, setSide] = useState('right');\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n      const { token } = await res.json();\n\n      setToken(token);\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleSwitchButtonClick = useCallback(() => {\n    setSide(side === 'left' ? 'right' : 'left');\n  }, [setSide, side]);\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  return (\n    <div className=\"minimizable-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          <span className={token ? 'ms-Icon ms-Icon--MessageFill' : 'ms-Icon ms-Icon--Message'} />\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\n        </button>\n      )}\n      {loaded && (\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\n          <header>\n            <div className=\"filler\" />\n            <button className=\"switch\" onClick={handleSwitchButtonClick}>\n              <span className=\"ms-Icon ms-Icon--Switch\" />\n            </button>\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n              <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n            </button>\n          </header>\n          <WebChat\n            className=\"react-web-chat\"\n            onFetchToken={handleFetchToken}\n            store={store}\n            styleSet={styleSet}\n            token={token}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MinimizableWebChat;\n","import React from 'react';\n\nimport MinimizableWebChat from './MinimizableWebChat';\nimport WebPageBackground from './WebPage.jpg';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <img alt=\"product background\" src={WebPageBackground} />\n    <MinimizableWebChat />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/WebPage.d6d7485a.jpg\";"],"sourceRoot":""}